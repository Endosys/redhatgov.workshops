---
#---------------------------------------------------
#  Hosts instance  Creation
#---------------------------------------------------
- name: Template Ansible Hosts File
  template:
    dest: "{{ inventory_working_dir }}/hosts"
    src: hosts.j2
  tags:
    - tf_create
#---------------------------------------------------
#   Get public network
#---------------------------------------------------
- name: get openstack network info
  os_networks_info:
    cloud: openstack
  register: network_result
- name: set openstack public network id
  set_fact:
    os_public_network_id: "{{ item.id }}"
    os_public_network_name: "{{ item.name }}"
  loop: "{{ network_result.openstack_networks }}"
  when: item.name  == "external-floating-ips"
- name: show openstack public network id
  debug:
    var: os_public_network_id
#---------------------------------------------------
#   Get image id
#---------------------------------------------------
- name: get openstack image id
  os_image_info:
    cloud: openstack
    image: "Red Hat Enterprise Linux 8.1 (BYOL)"
  register: image_result
- name: set openstack image id
  set_fact:
    os_image_id: "{{ image_result.openstack_image.id }}"
- name: show openstack image id
  debug:
    var: os_image_id
#---------------------------------------------------
#   Get image flavor id
#---------------------------------------------------
- name: get openstack image flavor id
  os_flavor_info:
    cloud: openstack
    name: "t1.medium"
  register: flavor_result
- name: set openstack image flavor id
  set_fact:
    os_image_flavor_id: "{{ flavor_result.openstack_flavors[0].id }}"
- name: show openstack image flavor id
  debug:
    var: os_image_flavor_id
#---------------------------------------------------
#   INI Creation
#---------------------------------------------------
# - name: Template EC2 INI File
#   template: dest="{{ inventory_working_dir }}/ec2.ini"  src=ec2.ini.j2
#   tags:
#     - tf_create

#---------------------------------------------------
#  SSH Key
#---------------------------------------------------
- stat:
    path: "{{ terraform_working_dir }}/{{ workshop_prefix }}-containers"
  register: terraform_ssh_key

- name: Check for existing key and remove
  os_keypair:
    cloud: openstack
    name: "{{ workshop_prefix }}-containers"
    region_name: "{{ os_region }}"
    state: absent
  when: terraform_ssh_key.stat.exists == false
  tags:
    - tf_create

- name: Create openstack keypair
  os_keypair:
    cloud: openstack
    name: "{{ workshop_prefix }}-containers"
    region_name: "{{ os_region }}"
    state: present
  register: openstack_key
  when: terraform_ssh_key.stat.exists == false
  tags:
    - tf_create

- debug:
    var: openstack_key
  tags:
    - tf_create

- name: Make temporary location to run Terraform
  file:
    path: "{{ terraform_working_dir }}"
    state: directory
  tags:
    - tf_create

- name: Create ssh keypair
  copy:
    content: "{{ openstack_key.key.private_key }}"
    dest: "{{ terraform_working_dir }}/{{ workshop_prefix }}-containers"
    mode: 0400
  when: terraform_ssh_key.stat.exists == false
  tags:
    - tf_create

#---------------------------------------------------
# Terraform.io
#---------------------------------------------------
- name: Template Terraform files locally to run
  template: dest="{{ terraform_working_dir }}/openstack.tf"  src=openstack.tf.j2
  tags:
    - tf_create

- name: Template terraform.tfvars
  template: dest="{{ terraform_working_dir }}/terraform.tfvars"  src=terraform.tfvars.j2
  tags:
    - tf_create

- name: Template proxy-user-data
  template: dest="{{ terraform_working_dir }}/proxy-user-data.txt"  src=proxy-user-data.txt.j2
  tags:
    - tf_create

- name: Template node-user-data
  template: dest="{{ terraform_working_dir }}/node-user-data.txt"  src=node-user-data.txt.j2
  tags:
    - tf_create

- name: Check Terraform version
  shell: terraform version
  register: tf
  changed_when: false

- set_fact:
    tf_version: "{{ tf.stdout_lines[0] | regex_replace('^Terraform.*v') }}"

- name: Initialize Terraform to discover plugins
  command: terraform init
  args:
    chdir: "{{ terraform_working_dir }}"
  when: tf_version is version('0.10.0', '>=')
  tags:
    - tf_create

- name: Create infrastructure using Terraform
  terraform:
    project_path: "{{ terraform_working_dir }}"
# NOTE: force_init will be supported with Ansible 2.6
#    force_init: yes
    state: present
  register: terraform_template_output
  tags:
    - tf_create

- debug:
    msg: "{{ terraform_template_output }}"
  tags:
    - tf_create

- debug:
    msg: "{{ terraform_template_output.outputs.public_ip.value }}"
  tags:
    - tf_create

- set_fact:
    openstack_public_ip: "{{ terraform_template_output.outputs.public_ip.value }}"
  tags:
    - tf_create

- name: Add public ip to hosts file
  lineinfile:
    path: /etc/hosts
    line: "{{ openstack_public_ip }} {{ workshop_prefix }}.proxy.{{ domain_name }}"

- name: wait for proxy to be ready 
  wait_for:
    host: "{{ workshop_prefix }}.proxy.{{ domain_name }}"
    port: 22
    state: started
    timeout: 300

- name: add subscription
  include_role:
    name: subscription_manager

- name: add nginx
  dnf:
    name: nginx
    state: latest
    

#- name: configure nginx
#- name: Run Terraform ( < 0.11.0 )
#  command: terraform apply
#  args:
#    chdir: "{{ terraform_working_dir }}"
#  when: tf_version is version('0.11.0', '<')
#  tags:
#    - tf_create

#- name: Run Terraform ( >= 0.11.0 )
#  command: terraform apply -auto-approve
#  args:
#    chdir: "{{ terraform_working_dir }}" 
#  when: tf_version is version('0.11.0', '>=')
#  tags:
#    - tf_create